using Microsoft.AspNetCore.Mvc;
using GeminiChatBot.Models;
using GeminiChatBot.Services;

namespace GeminiChatBot.Controllers;
[ApiController]
[Route("api/[controller]")]
public class ChatController : ControllerBase
{
    private readonly IChatService _chatService;
    private readonly ILogger<ChatController> _logger;

    public ChatController(IChatService chatService, ILogger<ChatController> logger)
    {
        _chatService = chatService;
        _logger = logger;
    }



    /// <summary>Chat with asistant.</summary>
    /// <param name="request">The request payload.</param>
    /// <param name="cancellationToken">The cancellationToken payload.</param>
    /// <returns>A new response generated by gemini.</returns>
    [HttpPost]
    public async Task<IActionResult> PostAsync(
        [FromBody] ChatRequestDto request,
        CancellationToken cancellationToken)
    {
        if (!ModelState.IsValid)
            return BadRequest(ModelState);

        try
        {
            var result = await _chatService.SendMessageAsync(request, cancellationToken);
            return Ok(result);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error calling Gemini");
            return StatusCode(500, new { error = "Internal AI error" });
        }
    }


     /// <summary>
    /// Gets the full history of messages for a given chat.
    /// </summary>
    [HttpGet("{chatId}/history")]
    public async Task<IActionResult> GetHistoryAsync(
        [FromRoute] int chatId,
        CancellationToken cancellationToken)
    {
        var history = await _chatService.GetHistoryAsync(chatId, cancellationToken);
        if (history == null)
            return NotFound(new { error = $"Chat with id={chatId} not found." });

        return Ok(history);
    }
}
